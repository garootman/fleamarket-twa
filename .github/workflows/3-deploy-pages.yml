name: Deploy Cloudflare Pages

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string

env:
  NODE_VERSION: '18'

jobs:
  deploy-pages:
    name: Deploy Pages
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Set environment
        id: env
        run: |
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT

      - name: Download build artifacts (if available)
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
        continue-on-error: true

      - name: Build frontend (if artifacts not found)
        run: |
          cd frontend
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "Building frontend as no artifacts found..."
            npm run build
          else
            echo "Using existing build artifacts"
          fi

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: twa-cf-tpl
          directory: ./frontend/dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Pages URL
        id: pages-url
        run: |
          ENV="${{ steps.env.outputs.environment }}"
          if [ "$ENV" = "production" ]; then
            echo "url=https://twa-cf-tpl.pages.dev" >> $GITHUB_OUTPUT
          else
            # For preview, URL will be generated by Cloudflare Pages
            # We'll use a placeholder that can be updated later
            COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            echo "url=https://$COMMIT_SHA.twa-cf-tpl.pages.dev" >> $GITHUB_OUTPUT
          fi

      - name: Test Pages Deployment
        run: |
          sleep 15
          echo "Testing Pages at: ${{ steps.pages-url.outputs.url }}"

          # Test if pages serve the index.html
          response=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.pages-url.outputs.url }}/")
          if [ "$response" != "200" ]; then
            echo "⚠️  Pages check returned status $response (may be normal for preview URLs)"
          else
            echo "✅ Pages deployment verified"
          fi

      - name: Update Web App URL in Worker (if needed)
        run: |
          echo "📝 Note: Update the webAppUrl in backend/src/webhook.ts to:"
          echo "   const webAppUrl = '${{ steps.pages-url.outputs.url }}'"
          echo "   This should be done as a follow-up commit or configuration."

      - name: Output Pages URL
        run: |
          echo "🚀 Pages deployed successfully!"
          echo "🔗 Pages URL: ${{ steps.pages-url.outputs.url }}"
          echo "📱 Web App: Access via Telegram bot after webhook setup"

  deployment-notification:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: deploy-pages
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy-pages.result }}" = "success" ]; then
            echo "✅ Pages deployment successful"
          else
            echo "❌ Pages deployment failed"
            exit 1
          fi