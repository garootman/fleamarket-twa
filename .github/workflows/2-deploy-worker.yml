name: Deploy Cloudflare Worker

on:
  workflow_call:
    outputs:
      worker_url:
        description: "URL of the deployed worker"
        value: ${{ jobs.deploy-worker.outputs.worker_url }}

env:
  NODE_VERSION: '20'

jobs:
  deploy-worker:
    name: Deploy Worker
    runs-on: ubuntu-latest
    outputs:
      worker_url: ${{ steps.worker-url.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Create or Get KV Namespace
        run: |
          cd backend
          # Try to create KV namespace and capture the output
          echo "Creating KV namespace 'sessions'..."
          kv_output=$(npx wrangler kv:namespace create sessions --env="" 2>&1)
          echo "KV creation output: $kv_output"

          # Extract the namespace ID from the output
          if echo "$kv_output" | grep -q "id.*="; then
            kv_id=$(echo "$kv_output" | grep -o 'id.*=' | sed 's/id.*= *//' | tr -d '"' | head -1)
            echo "Created KV namespace with ID: $kv_id"
            echo "KV_NAMESPACE_ID=$kv_id" >> $GITHUB_ENV
          elif echo "$kv_output" | grep -q "already exists"; then
            echo "KV namespace already exists, getting existing ID..."
            # List namespaces and find the sessions one
            list_output=$(npx wrangler kv:namespace list 2>&1)
            echo "Existing namespaces: $list_output"
            if echo "$list_output" | grep -q "sessions"; then
              kv_id=$(echo "$list_output" | grep "sessions" | grep -o '"id":"[^"]*"' | cut -d'"' -f4 | head -1)
              echo "Found existing KV namespace with ID: $kv_id"
              echo "KV_NAMESPACE_ID=$kv_id" >> $GITHUB_ENV
            else
              echo "Could not find existing sessions namespace, will use fallback"
              echo "KV_NAMESPACE_ID=" >> $GITHUB_ENV
            fi
          else
            echo "KV namespace creation failed or ID not found in output"
            echo "KV_NAMESPACE_ID=" >> $GITHUB_ENV
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Update wrangler.toml with KV ID
        run: |
          cd backend
          if [ -n "$KV_NAMESPACE_ID" ]; then
            echo "Updating wrangler.toml with KV namespace ID: $KV_NAMESPACE_ID"
            # Create a temporary wrangler.toml with the actual KV ID
            sed "s/# id = \"sessions\"/id = \"$KV_NAMESPACE_ID\"/" ../wrangler.toml > wrangler.toml.tmp
            sed 's/# preview_id = "sessions"/preview_id = "'"$KV_NAMESPACE_ID"'"/' wrangler.toml.tmp > wrangler.toml.tmp2
            sed 's/# binding = "SESSIONS"/binding = "SESSIONS"/' wrangler.toml.tmp2 > wrangler.toml.tmp3
            sed 's/# \[\[kv_namespaces\]\]/[[kv_namespaces]]/' wrangler.toml.tmp3 > ../wrangler.toml
            rm wrangler.toml.tmp*
            echo "Updated wrangler.toml:"
            cat ../wrangler.toml | grep -A 5 "kv_namespaces"
          else
            echo "No KV namespace ID available, skipping wrangler.toml update"
          fi

      - name: Set Cloudflare Secrets
        run: |
          cd backend
          # Update existing secrets or create if they don't exist
          echo "${{ secrets.TELEGRAM_BOT_TOKEN }}" | npx wrangler secret put TELEGRAM_BOT_TOKEN --env="" || true
          echo "${{ secrets.TELEGRAM_ADMIN_ID }}" | npx wrangler secret put TELEGRAM_ADMIN_ID --env="" || true
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy to Cloudflare Workers
        id: deploy
        run: |
          cd backend
          npx wrangler deploy --env=""
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Get Worker URL
        id: worker-url
        run: |
          # Use static GitHub variable instead of dynamic URL
          WORKER_URL="${{ vars.WORKER_URL }}"
          echo "Worker URL: $WORKER_URL"
          echo "url=$WORKER_URL" >> $GITHUB_OUTPUT

      - name: Test Worker Health
        run: |
          sleep 5
          echo "Testing Worker at: ${{ steps.worker-url.outputs.url }}"

          # Test health endpoint with detailed output
          echo "Testing /health endpoint..."
          health_response=$(curl -s -w "%{http_code}" "${{ steps.worker-url.outputs.url }}/health")
          health_status=$(echo "$health_response" | tail -c 4)
          health_body=$(echo "$health_response" | head -c -4)

          echo "Health endpoint returned status: $health_status"
          echo "Health endpoint response body: $health_body"

          if [ "$health_status" != "200" ]; then
            echo "❌ Health check failed with status $health_status"
            exit 1
          fi

          # Test hello endpoint with detailed output
          echo "Testing /api/hello endpoint..."
          hello_response=$(curl -s -w "%{http_code}" "${{ steps.worker-url.outputs.url }}/api/hello")
          hello_status=$(echo "$hello_response" | tail -c 4)
          hello_body=$(echo "$hello_response" | head -c -4)

          echo "Hello endpoint returned status: $hello_status"
          echo "Hello endpoint response body: $hello_body"

          if [ "$hello_status" != "200" ]; then
            echo "❌ Hello API check failed with status $hello_status"
            exit 1
          fi

          # Test that KV is accessible by checking health endpoint for KV status
          echo "Checking KV availability in health endpoint..."
          if echo "$health_body" | grep -q '"kv"'; then
            echo "✅ KV binding detected in health endpoint"
          else
            echo "⚠️ KV binding not found in health response, but continuing..."
          fi

          echo "✅ Worker deployment verified"

