name: Deploy Cloudflare Worker

on:
  workflow_call:
    outputs:
      worker_url:
        description: "URL of the deployed worker"
        value: ${{ jobs.deploy-worker.outputs.worker_url }}

env:
  NODE_VERSION: '20'

jobs:
  deploy-worker:
    name: Deploy Worker
    runs-on: ubuntu-latest
    outputs:
      worker_url: ${{ steps.worker-url.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Set Cloudflare Secrets
        run: |
          cd backend
          # Update existing secrets or create if they don't exist
          echo "${{ secrets.TELEGRAM_BOT_TOKEN }}" | npx wrangler secret put TELEGRAM_BOT_TOKEN --env="" || true
          echo "${{ secrets.TELEGRAM_ADMIN_ID }}" | npx wrangler secret put TELEGRAM_ADMIN_ID --env="" || true
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy to Cloudflare Workers
        id: deploy
        run: |
          cd backend
          # Capture deployment output to get the actual URL
          deployment_output=$(npx wrangler deploy --env="" 2>&1)
          echo "Deployment output:"
          echo "$deployment_output"

          # Extract worker URL from deployment output
          if echo "$deployment_output" | grep -q "https://.*\.workers\.dev"; then
            worker_url=$(echo "$deployment_output" | grep -o "https://[^[:space:]]*\.workers\.dev[^[:space:]]*" | head -1)
            echo "worker_url=$worker_url" >> $GITHUB_OUTPUT
          else
            # Fallback to standard format
            worker_url="https://twa-cf-tpl.${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.workers.dev"
            echo "worker_url=$worker_url" >> $GITHUB_OUTPUT
          fi

          echo "Detected Worker URL: $worker_url"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Get Worker URL
        id: worker-url
        run: |
          WORKER_URL="${{ steps.deploy.outputs.worker_url }}"
          echo "Worker URL: $WORKER_URL"
          echo "url=$WORKER_URL" >> $GITHUB_OUTPUT

      - name: Test Worker Health
        run: |
          sleep 5
          echo "Testing Worker at: ${{ steps.worker-url.outputs.url }}"

          # Test health endpoint with detailed output
          echo "Testing /health endpoint..."
          health_response=$(curl -s -w "%{http_code}" "${{ steps.worker-url.outputs.url }}/health")
          health_status=$(echo "$health_response" | tail -c 4)
          health_body=$(echo "$health_response" | head -c -4)

          echo "Health endpoint returned status: $health_status"
          echo "Health endpoint response body: $health_body"

          if [ "$health_status" != "200" ]; then
            echo "❌ Health check failed with status $health_status"
            exit 1
          fi

          # Test hello endpoint with detailed output
          echo "Testing /api/hello endpoint..."
          hello_response=$(curl -s -w "%{http_code}" "${{ steps.worker-url.outputs.url }}/api/hello")
          hello_status=$(echo "$hello_response" | tail -c 4)
          hello_body=$(echo "$hello_response" | head -c -4)

          echo "Hello endpoint returned status: $hello_status"
          echo "Hello endpoint response body: $hello_body"

          if [ "$hello_status" != "200" ]; then
            echo "❌ Hello API check failed with status $hello_status"
            exit 1
          fi

          echo "✅ Worker deployment verified"

