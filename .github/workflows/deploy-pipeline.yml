name: üöÄ Deploy Pipeline

on:
  push:
    branches: [main, '002-we-are-building']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production
      skip_tests:
        description: 'Skip build and test step'
        required: false
        default: false
        type: boolean
      skip_webhook_check:
        description: 'Skip final webhook health check'
        required: false
        default: false
        type: boolean

env:
  PIPELINE_ENVIRONMENT: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && github.event_name == 'push' && 'production' || 'preview') }}

jobs:
  # Step 1: Build & Test
  build-and-test:
    name: "üì¶ Build & Test"
    if: ${{ !github.event.inputs.skip_tests }}
    uses: ./.github/workflows/1-build-test.yml
    secrets: inherit

  # Step 2: Deploy Worker
  deploy-worker:
    name: "‚ö° Deploy Worker"
    needs: build-and-test
    if: ${{ always() && (needs.build-and-test.result == 'success' || github.event.inputs.skip_tests) }}
    uses: ./.github/workflows/2-deploy-worker.yml
    with:
      environment: ${{ env.PIPELINE_ENVIRONMENT }}
    secrets: inherit

  # Step 3: Deploy Pages
  deploy-pages:
    name: "üì± Deploy Pages"
    needs: [build-and-test, deploy-worker]
    if: ${{ always() && needs.deploy-worker.result == 'success' && (needs.build-and-test.result == 'success' || github.event.inputs.skip_tests) }}
    uses: ./.github/workflows/3-deploy-pages.yml
    with:
      environment: ${{ env.PIPELINE_ENVIRONMENT }}
    secrets: inherit

  # Step 4: Setup Webhook
  setup-webhook:
    name: "ü§ñ Setup Webhook"
    needs: [build-and-test, deploy-worker, deploy-pages]
    if: ${{ always() && needs.deploy-worker.result == 'success' && needs.deploy-pages.result == 'success' && (needs.build-and-test.result == 'success' || github.event.inputs.skip_tests) }}
    uses: ./.github/workflows/4-setup-webhook.yml
    with:
      environment: ${{ env.PIPELINE_ENVIRONMENT }}
    secrets: inherit

  # Step 5: Health Check
  webhook-health-check:
    name: "üè• Health Check"
    needs: [build-and-test, deploy-worker, deploy-pages, setup-webhook]
    if: ${{ always() && !github.event.inputs.skip_webhook_check && needs.setup-webhook.result == 'success' && (needs.build-and-test.result == 'success' || github.event.inputs.skip_tests) }}
    uses: ./.github/workflows/5-check-webhook.yml
    with:
      environment: ${{ env.PIPELINE_ENVIRONMENT }}
      run_full_test: false
    secrets: inherit

  # Pipeline Summary
  pipeline-summary:
    name: "üìä Pipeline Summary"
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-worker, deploy-pages, setup-webhook, webhook-health-check]
    if: always()
    steps:
      - name: Pipeline Results
        run: |
          echo "# üöÄ Deployment Pipeline Results"
          echo ""
          echo "**Environment:** ${{ env.PIPELINE_ENVIRONMENT }}"
          echo "**Trigger:** ${{ github.event_name }}"
          echo "**Branch:** ${{ github.ref_name }}"
          echo "**Commit:** ${{ github.sha }}"
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "## Step Results"
          echo ""

          # Build & Test
          if [ "${{ github.event.inputs.skip_tests }}" = "true" ]; then
            echo "‚è≠Ô∏è **Build & Test:** Skipped"
          elif [ "${{ needs.build-and-test.result }}" = "success" ]; then
            echo "‚úÖ **Build & Test:** Passed"
          elif [ "${{ needs.build-and-test.result }}" = "failure" ]; then
            echo "‚ùå **Build & Test:** Failed"
          else
            echo "‚ö†Ô∏è **Build & Test:** ${{ needs.build-and-test.result }}"
          fi

          # Deploy Worker
          if [ "${{ needs.deploy-worker.result }}" = "success" ]; then
            echo "‚úÖ **Deploy Worker:** Successful"
          elif [ "${{ needs.deploy-worker.result }}" = "failure" ]; then
            echo "‚ùå **Deploy Worker:** Failed"
          elif [ "${{ needs.deploy-worker.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è **Deploy Worker:** Skipped (previous step failed)"
          else
            echo "‚ö†Ô∏è **Deploy Worker:** ${{ needs.deploy-worker.result }}"
          fi

          # Deploy Pages
          if [ "${{ needs.deploy-pages.result }}" = "success" ]; then
            echo "‚úÖ **Deploy Pages:** Successful"
          elif [ "${{ needs.deploy-pages.result }}" = "failure" ]; then
            echo "‚ùå **Deploy Pages:** Failed"
          elif [ "${{ needs.deploy-pages.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è **Deploy Pages:** Skipped (previous step failed)"
          else
            echo "‚ö†Ô∏è **Deploy Pages:** ${{ needs.deploy-pages.result }}"
          fi

          # Setup Webhook
          if [ "${{ needs.setup-webhook.result }}" = "success" ]; then
            echo "‚úÖ **Setup Webhook:** Successful"
          elif [ "${{ needs.setup-webhook.result }}" = "failure" ]; then
            echo "‚ùå **Setup Webhook:** Failed"
          elif [ "${{ needs.setup-webhook.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è **Setup Webhook:** Skipped (previous step failed)"
          else
            echo "‚ö†Ô∏è **Setup Webhook:** ${{ needs.setup-webhook.result }}"
          fi

          # Health Check
          if [ "${{ github.event.inputs.skip_webhook_check }}" = "true" ]; then
            echo "‚è≠Ô∏è **Health Check:** Skipped"
          elif [ "${{ needs.webhook-health-check.result }}" = "success" ]; then
            echo "‚úÖ **Health Check:** Passed"
          elif [ "${{ needs.webhook-health-check.result }}" = "failure" ]; then
            echo "‚ùå **Health Check:** Failed"
          elif [ "${{ needs.webhook-health-check.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è **Health Check:** Skipped (previous step failed)"
          else
            echo "‚ö†Ô∏è **Health Check:** ${{ needs.webhook-health-check.result }}"
          fi

          echo ""

          # Overall status
          if [ "${{ needs.setup-webhook.result }}" = "success" ] && ([ "${{ needs.webhook-health-check.result }}" = "success" ] || [ "${{ github.event.inputs.skip_webhook_check }}" = "true" ]); then
            echo "## üéâ Pipeline Status: SUCCESS"
            echo ""
            echo "All deployment steps completed successfully!"
            if [ "${{ env.PIPELINE_ENVIRONMENT }}" = "production" ]; then
              echo "üî¥ **Production deployment is live!**"
            else
              echo "üü° **Preview deployment is ready for testing!**"
            fi
          else
            echo "## ‚ùå Pipeline Status: FAILED"
            echo ""
            echo "One or more deployment steps failed. Check the logs above for details."
            exit 1
          fi

      - name: Set up URLs (for reference)
        run: |
          echo "## üîó Deployment URLs"
          echo ""
          if [ "${{ env.PIPELINE_ENVIRONMENT }}" = "production" ]; then
            echo "- **Worker:** \`https://twa-cf-tpl-prod.YOUR_ACCOUNT.workers.dev\`"
            echo "- **Pages:** \`https://twa-cf-tpl.pages.dev\`"
          else
            echo "- **Worker:** \`https://twa-cf-tpl-preview.YOUR_ACCOUNT.workers.dev\`"
            echo "- **Pages:** \`https://COMMIT.twa-cf-tpl.pages.dev\`"
          fi
          echo ""
          echo "Replace \`YOUR_ACCOUNT\` with your Cloudflare Account ID in the worker URLs."