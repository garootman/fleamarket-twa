name: Maintenance & Utils

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - 'cleanup-deployments'
          - 'reset-webhook'
          - 'test-full-stack'
          - 'update-dependencies'
      environment:
        description: 'Environment (for applicable actions)'
        required: false
        default: 'preview'
        type: choice
        options:
          - preview
          - production

jobs:
  maintenance:
    name: Maintenance Task
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'preview' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Determine environment
        id: env
        run: |
          ENV="${{ github.event.inputs.environment || 'preview' }}"
          echo "environment=$ENV" >> $GITHUB_OUTPUT

          if [ "$ENV" = "production" ]; then
            echo "bot_token_secret=TELEGRAM_BOT_TOKEN_PROD" >> $GITHUB_OUTPUT
            echo "worker_url=https://twa-cf-tpl-prod.${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.workers.dev" >> $GITHUB_OUTPUT
          else
            echo "bot_token_secret=TELEGRAM_BOT_TOKEN_PREVIEW" >> $GITHUB_OUTPUT
            echo "worker_url=https://twa-cf-tpl-preview.${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.workers.dev" >> $GITHUB_OUTPUT
          fi

      - name: Cleanup Old Deployments
        if: ${{ github.event.inputs.action == 'cleanup-deployments' }}
        run: |
          echo "üßπ Cleaning up old deployments..."
          echo "This would typically:"
          echo "- Remove old Cloudflare Pages deployments"
          echo "- Clean up old Worker versions"
          echo "- Archive old artifacts"
          echo ""
          echo "Note: Implement specific cleanup logic based on your needs"

      - name: Reset Webhook
        if: ${{ github.event.inputs.action == 'reset-webhook' }}
        run: |
          BOT_TOKEN="${{ secrets[steps.env.outputs.bot_token_secret] }}"
          echo "üîÑ Resetting webhook for ${{ steps.env.outputs.environment }} environment..."

          # First, delete current webhook
          echo "Removing current webhook..."
          DELETE_RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/deleteWebhook" \
            -H "Content-Type: application/json" \
            -d '{"drop_pending_updates": true}')

          echo "Delete response:"
          echo "$DELETE_RESPONSE" | jq .

          sleep 5

          # Set new webhook
          WEBHOOK_URL="${{ steps.env.outputs.worker_url }}/webhook"
          echo "Setting new webhook: $WEBHOOK_URL"

          SET_RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/setWebhook" \
            -H "Content-Type: application/json" \
            -d "{
              \"url\": \"$WEBHOOK_URL\",
              \"allowed_updates\": [\"message\", \"callback_query\"],
              \"drop_pending_updates\": true
            }")

          echo "Set response:"
          echo "$SET_RESPONSE" | jq .

          if echo "$SET_RESPONSE" | jq -e '.ok' > /dev/null; then
            echo "‚úÖ Webhook reset successfully"
          else
            echo "‚ùå Failed to reset webhook"
            exit 1
          fi

      - name: Test Full Stack
        if: ${{ github.event.inputs.action == 'test-full-stack' }}
        run: |
          echo "üß™ Running full stack test..."

          # Test Worker
          WORKER_URL="${{ steps.env.outputs.worker_url }}"
          echo "Testing Worker at: $WORKER_URL"

          # Health check
          HEALTH_RESPONSE=$(curl -s "$WORKER_URL/health")
          echo "Health check:"
          echo "$HEALTH_RESPONSE" | jq .

          # API check
          HELLO_RESPONSE=$(curl -s "$WORKER_URL/api/hello")
          echo "Hello API:"
          echo "$HELLO_RESPONSE" | jq .

          # Webhook info check
          BOT_TOKEN="${{ secrets[steps.env.outputs.bot_token_secret] }}"
          WEBHOOK_INFO=$(curl -s "https://api.telegram.org/bot$BOT_TOKEN/getWebhookInfo")
          echo "Webhook info:"
          echo "$WEBHOOK_INFO" | jq .

          # Test Pages (if URL is known)
          echo "Note: Pages testing would require knowing the exact Pages URL"

          echo "‚úÖ Full stack test completed"

      - name: Update Dependencies
        if: ${{ github.event.inputs.action == 'update-dependencies' }}
        run: |
          echo "üì¶ Checking for dependency updates..."

          echo "Backend dependencies:"
          cd backend
          npm outdated || true

          echo ""
          echo "Frontend dependencies:"
          cd ../frontend
          npm outdated || true

          echo ""
          echo "Note: To actually update dependencies, run:"
          echo "  npm update (for minor updates)"
          echo "  npm install package@latest (for major updates)"

      - name: Summary
        run: |
          echo "‚úÖ Maintenance action '${{ github.event.inputs.action }}' completed"
          echo "Environment: ${{ steps.env.outputs.environment }}"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"